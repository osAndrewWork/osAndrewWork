'use strict';

import Hapi from "@hapi/hapi";
import { Server } from "@hapi/hapi";
import jk from "./utils/jkurwa/lib/index.js";

export let server: Server;

export const init = async function(): Promise<Server> {
    server = Hapi.server({
        port: process.env.PORT || 4000,
        host: '0.0.0.0'
    });

    // Routes will go here

    return server;
};

export const start = async function (): Promise<void> {
    console.log(`Listening on ${server.settings.host}:${server.settings.port}`);
    const signature = "";
    const message = new jk.models.Message(jk.b64_decode(signature));
    const cert = message && message.signer();
    // console.log(cert);
    console.log("info",  message.info.contentInfo.content)
    const content = message.info && message.info.contentInfo && message.info.contentInfo.content;
    console.log(content);
    const ipn = cert.extension && cert.extension.ipn;
    const normalizedIpn = normalizeIpn(ipn);
    const signer = { ...cert.subject, ipn, normalizedIpn };
    const issuer = cert.issuer;
    console.log(signer);
    console.log(issuer);
    return server.start();
};

process.on('unhandledRejection', (err) => {
    console.error("unhandledRejection");
    console.error(err);
    process.exit(1);
});

init().then(() => start());

interface IPN{
    DRFO: string;
    EDRPOU?: string;
}

/**
 * Normalize IPN.
 * @private
 * @param {{DRFO: string, EDRPOU: string}} ipn - IPN object.
 * @returns {{DRFO: string, EDRPOU: string}} Normalized IPN object.
 */
const normalizeIpn = (ipn: {DRFO: string, EDRPOU: string}): IPN | {}  => {
    // Check if not an object.
    if (typeof ipn !== 'object') { return {}; }

    // Define params.
    const { DRFO, EDRPOU } = ipn;
    const normalizedDRFO = normalizeCode(DRFO);
    const normalizedEDRPOU = normalizeCode(EDRPOU);

    // Define and return normalized IPN.
    const normalizedIpn = { DRFO: normalizedDRFO, EDRPOU: normalizedEDRPOU };
    return normalizedIpn;
}

/**
 * Normalize code.
 * @private
 * @param {string} code Code.
 */
const normalizeCode = (code: string) =>{
    // Check if not a string.
    if (typeof code !== 'string') { return; }

    // Filter chars.
    const codeArray = code.toUpperCase().split('');
    const filteredCodeArray = codeArray.filter(v => (v >= '0' && v <= '9') || (v >= 'A' && v <= 'Z') || (v >= 'А' && v <= 'Я'));
    const filteredCode = filteredCodeArray.join('');

    // Check if empty after filters.
    if (filteredCode.length === 0) { return; }

    // Return filtered code.
    return filteredCode;
}